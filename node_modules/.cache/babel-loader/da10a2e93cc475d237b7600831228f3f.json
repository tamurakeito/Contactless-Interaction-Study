{"ast":null,"code":"export const SIDE_OPTIONS = [\"top\", \"right\", \"bottom\", \"left\"];\nexport const ALIGN_OPTIONS = [\"start\", \"center\", \"end\"];\nexport function getPlacementData(_ref) {\n  let {\n    anchorRect: p,\n    popperSize: c,\n    arrowSize: f,\n    arrowOffset: l = 0,\n    side: d,\n    sideOffset: h = 0,\n    align: x,\n    alignOffset: g = 0,\n    shouldAvoidCollisions: u = !0,\n    collisionBoundariesRect: w,\n    collisionTolerance: m = 0\n  } = _ref;\n  if (!p || !c || !w) return {\n    popperStyles: o,\n    arrowStyles: n\n  };\n\n  const y = function (e, r) {\n    let o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let i = arguments.length > 4 ? arguments[4] : undefined;\n    const p = i ? i.height : 0,\n          a = t(r, e, \"x\"),\n          s = t(r, e, \"y\"),\n          c = s.before - o - p,\n          f = s.after + o + p,\n          l = a.before - o - p,\n          d = a.after + o + p;\n    return {\n      top: {\n        start: {\n          x: a.start + n,\n          y: c\n        },\n        center: {\n          x: a.center,\n          y: c\n        },\n        end: {\n          x: a.end - n,\n          y: c\n        }\n      },\n      right: {\n        start: {\n          x: d,\n          y: s.start + n\n        },\n        center: {\n          x: d,\n          y: s.center\n        },\n        end: {\n          x: d,\n          y: s.end - n\n        }\n      },\n      bottom: {\n        start: {\n          x: a.start + n,\n          y: f\n        },\n        center: {\n          x: a.center,\n          y: f\n        },\n        end: {\n          x: a.end - n,\n          y: f\n        }\n      },\n      left: {\n        start: {\n          x: l,\n          y: s.start + n\n        },\n        center: {\n          x: l,\n          y: s.center\n        },\n        end: {\n          x: l,\n          y: s.end - n\n        }\n      }\n    };\n  }(c, p, h, g, f),\n        b = y[d][x];\n\n  if (!1 === u) {\n    const t = e(b);\n    let o = n;\n    f && (o = i({\n      popperSize: c,\n      arrowSize: f,\n      arrowOffset: l,\n      side: d,\n      align: x\n    }));\n    return {\n      popperStyles: { ...t,\n        \"--radix-popper-transform-origin\": r(c, d, x, l, f)\n      },\n      arrowStyles: o,\n      placedSide: d,\n      placedAlign: x\n    };\n  }\n\n  const S = DOMRect.fromRect({ ...c,\n    ...b\n  }),\n        $ = (O = w, z = m, DOMRect.fromRect({\n    width: O.width - 2 * z,\n    height: O.height - 2 * z,\n    x: O.left + z,\n    y: O.top + z\n  }));\n  var O, z;\n\n  const R = s(S, $),\n        M = y[a(d)][x],\n        D = function (t, e, r) {\n    const o = a(t);\n    return e[t] && !r[o] ? o : t;\n  }(d, R, s(DOMRect.fromRect({ ...c,\n    ...M\n  }), $)),\n        A = function (t, e, r, o, n) {\n    const i = \"top\" === r || \"bottom\" === r,\n          p = i ? \"left\" : \"top\",\n          a = i ? \"right\" : \"bottom\",\n          s = i ? \"width\" : \"height\",\n          c = e[s] > t[s];\n    if ((\"start\" === o || \"center\" === o) && (n[p] && c || n[a] && !c)) return \"end\";\n    if ((\"end\" === o || \"center\" === o) && (n[a] && c || n[p] && !c)) return \"start\";\n    return o;\n  }(c, p, d, x, R),\n        I = e(y[D][A]);\n\n  let C = n;\n  f && (C = i({\n    popperSize: c,\n    arrowSize: f,\n    arrowOffset: l,\n    side: D,\n    align: A\n  }));\n  return {\n    popperStyles: { ...I,\n      \"--radix-popper-transform-origin\": r(c, D, A, l, f)\n    },\n    arrowStyles: C,\n    placedSide: D,\n    placedAlign: A\n  };\n}\n\nfunction t(t, e, r) {\n  const o = t[\"x\" === r ? \"left\" : \"top\"],\n        n = \"x\" === r ? \"width\" : \"height\",\n        i = t[n],\n        p = e[n];\n  return {\n    before: o - p,\n    start: o,\n    center: o + (i - p) / 2,\n    end: o + i - p,\n    after: o + i\n  };\n}\n\nfunction e(t) {\n  return {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    minWidth: \"max-content\",\n    willChange: \"transform\",\n    transform: `translate3d(${Math.round(t.x + window.scrollX)}px, ${Math.round(t.y + window.scrollY)}px, 0)`\n  };\n}\n\nfunction r(t, e, r, o, n) {\n  const i = \"top\" === e || \"bottom\" === e,\n        p = n ? n.width : 0,\n        a = n ? n.height : 0,\n        s = p / 2 + o;\n  let c = \"\",\n      f = \"\";\n  return i ? (c = {\n    start: `${s}px`,\n    center: \"center\",\n    end: t.width - s + \"px\"\n  }[r], f = \"top\" === e ? `${t.height + a}px` : -a + \"px\") : (c = \"left\" === e ? `${t.width + a}px` : -a + \"px\", f = {\n    start: `${s}px`,\n    center: \"center\",\n    end: t.height - s + \"px\"\n  }[r]), `${c} ${f}`;\n}\n\nconst o = {\n  position: \"fixed\",\n  top: 0,\n  left: 0,\n  opacity: 0,\n  transform: \"translate3d(0, -200%, 0)\"\n},\n      n = {\n  position: \"absolute\",\n  opacity: 0\n};\n\nfunction i(_ref2) {\n  let {\n    popperSize: t,\n    arrowSize: e,\n    arrowOffset: r,\n    side: o,\n    align: n\n  } = _ref2;\n  const i = (t.width - e.width) / 2,\n        a = (t.height - e.width) / 2,\n        s = {\n    top: 0,\n    right: 90,\n    bottom: 180,\n    left: -90\n  }[o],\n        c = Math.max(e.width, e.height),\n        f = {\n    width: `${c}px`,\n    height: `${c}px`,\n    transform: `rotate(${s}deg)`,\n    willChange: \"transform\",\n    position: \"absolute\",\n    [o]: \"100%\",\n    direction: p(o, n)\n  };\n  return \"top\" !== o && \"bottom\" !== o || (\"start\" === n && (f.left = `${r}px`), \"center\" === n && (f.left = `${i}px`), \"end\" === n && (f.right = `${r}px`)), \"left\" !== o && \"right\" !== o || (\"start\" === n && (f.top = `${r}px`), \"center\" === n && (f.top = `${a}px`), \"end\" === n && (f.bottom = `${r}px`)), f;\n}\n\nfunction p(t, e) {\n  return (\"top\" !== t && \"right\" !== t || \"end\" !== e) && (\"bottom\" !== t && \"left\" !== t || \"end\" === e) ? \"ltr\" : \"rtl\";\n}\n\nfunction a(t) {\n  return {\n    top: \"bottom\",\n    right: \"left\",\n    bottom: \"top\",\n    left: \"right\"\n  }[t];\n}\n\nfunction s(t, e) {\n  return {\n    top: t.top < e.top,\n    right: t.right > e.right,\n    bottom: t.bottom > e.bottom,\n    left: t.left < e.left\n  };\n}","map":{"version":3,"mappings":"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","names":["SIDE_OPTIONS","ALIGN_OPTIONS","getPlacementData","anchorRect","popperSize","arrowSize","arrowOffset","side","sideOffset","align","alignOffset","shouldAvoidCollisions","collisionBoundariesRect","collisionTolerance","popperStyles","UNMEASURED_POPPER_STYLES","arrowStyles","UNMEASURED_ARROW_STYLES","allPlacementPoints","arrowBaseToTipLength","height","x","getPopperSlotsForAxis","y","topY","before","bottomY","after","leftX","rightX","top","start","center","end","right","bottom","left","getAllPlacementPoints","popperPoint","getPlacementStylesForPoint","getPopperArrowStyles","getTransformOrigin","placedSide","placedAlign","popperRect","DOMRect","fromRect","collisionBoundariesRectWithTolerance","rect","amount","width","popperCollisions","getCollisions","oppositeSidePopperPoint","getOppositeSide","collisions","oppositeSideCollisions","oppositeSide","getSideAccountingForCollisions","anchorSize","isHorizontalSide","startBound","endBound","dimension","isAnchorBigger","getAlignAccountingForCollisions","axis","anchorStart","anchorDimension","popperDimension","point","position","minWidth","willChange","transform","Math","round","window","scrollX","scrollY","arrowBaseLength","opacity","popperCenterX","popperCenterY","rotation","arrowMaxDimension","max","styles","direction","getArrowCssDirection"],"sources":["/Users/tamurakeito/Desktop/facemesh/node_modules/@radix-ui/popper/dist/packages/core/popper/src/popper.ts"],"sourcesContent":["import * as CSS from 'csstype';\n\nconst SIDE_OPTIONS = ['top', 'right', 'bottom', 'left'] as const;\nconst ALIGN_OPTIONS = ['start', 'center', 'end'] as const;\n\ntype Axis = 'x' | 'y';\ntype Side = typeof SIDE_OPTIONS[number];\ntype Align = typeof ALIGN_OPTIONS[number];\ntype Point = { x: number; y: number };\ntype Size = { width: number; height: number };\n\ntype GetPlacementDataOptions = {\n  /** The rect of the anchor we are placing around */\n  anchorRect?: ClientRect;\n  /** The size of the popper to place */\n  popperSize?: Size;\n  /** An optional arrow size */\n  arrowSize?: Size;\n  /** An optional arrow offset (along the side, default: 0) */\n  arrowOffset?: number;\n  /** The desired side */\n  side: Side;\n  /** An optional side offset (distance from the side, default: 0)  */\n  sideOffset?: number;\n  /** The desired alignment */\n  align: Align;\n  /** An optional alignment offset (distance along the side, default: 0) */\n  alignOffset?: number;\n  /** An option to turn on/off the collision handling (default: true) */\n  shouldAvoidCollisions?: boolean;\n  /** The rect which represents the boundaries for collision checks */\n  collisionBoundariesRect?: ClientRect;\n  /** The tolerance used for collisions, ie. if we want them to trigger a bit earlier (default: 0) */\n  collisionTolerance?: number;\n};\n\ntype PlacementData = {\n  popperStyles: CSS.Properties;\n  arrowStyles: CSS.Properties;\n  placedSide?: Side;\n  placedAlign?: Align;\n};\n\n/**\n * Given all the information necessary to compute it,\n * this function calculates all the necessary placement data.\n *\n * It will return:\n *\n * - the styles to apply to the popper (including a custom property that is useful to set the transform origin in the right place)\n * - the styles to apply to the arrow\n * - the placed side (because it might have changed because of collisions)\n * - the placed align (because it might have changed because of collisions)\n */\nfunction getPlacementData({\n  anchorRect,\n  popperSize,\n  arrowSize,\n  arrowOffset = 0,\n  side,\n  sideOffset = 0,\n  align,\n  alignOffset = 0,\n  shouldAvoidCollisions = true,\n  collisionBoundariesRect,\n  collisionTolerance = 0,\n}: GetPlacementDataOptions): PlacementData {\n  // if we're not ready to do all the measurements yet,\n  // we return some good default styles\n  if (!anchorRect || !popperSize || !collisionBoundariesRect) {\n    return {\n      popperStyles: UNMEASURED_POPPER_STYLES,\n      arrowStyles: UNMEASURED_ARROW_STYLES,\n    };\n  }\n\n  // pre-compute points for all potential placements\n  const allPlacementPoints = getAllPlacementPoints(\n    popperSize,\n    anchorRect,\n    sideOffset,\n    alignOffset,\n    arrowSize\n  );\n\n  // get point based on side / align\n  const popperPoint = allPlacementPoints[side][align];\n\n  // if we don't need to avoid collisions, we can stop here\n  if (shouldAvoidCollisions === false) {\n    const popperStyles = getPlacementStylesForPoint(popperPoint);\n\n    let arrowStyles = UNMEASURED_ARROW_STYLES;\n    if (arrowSize) {\n      arrowStyles = getPopperArrowStyles({ popperSize, arrowSize, arrowOffset, side, align });\n    }\n\n    const transformOrigin = getTransformOrigin(popperSize, side, align, arrowOffset, arrowSize);\n\n    return {\n      popperStyles: {\n        ...popperStyles,\n        ['--radix-popper-transform-origin' as any]: transformOrigin,\n      },\n      arrowStyles,\n      placedSide: side,\n      placedAlign: align,\n    };\n  }\n\n  // create a new rect as if element had been moved to new placement\n  const popperRect = DOMRect.fromRect({ ...popperSize, ...popperPoint });\n\n  // create a new rect representing the collision boundaries but taking into account any added tolerance\n  const collisionBoundariesRectWithTolerance = getContractedRect(\n    collisionBoundariesRect,\n    collisionTolerance\n  );\n\n  // check for any collisions in new placement\n  const popperCollisions = getCollisions(popperRect, collisionBoundariesRectWithTolerance);\n\n  // do all the same calculations for the opposite side\n  // this is because we need to check for potential collisions if we were to swap side\n  const oppositeSide = getOppositeSide(side);\n  const oppositeSidePopperPoint = allPlacementPoints[oppositeSide][align];\n  const updatedOppositeSidePopperPoint = DOMRect.fromRect({\n    ...popperSize,\n    ...oppositeSidePopperPoint,\n  });\n  const oppositeSidePopperCollisions = getCollisions(\n    updatedOppositeSidePopperPoint,\n    collisionBoundariesRectWithTolerance\n  );\n\n  // adjust side accounting for collisions / opposite side collisions\n  const placedSide = getSideAccountingForCollisions(\n    side,\n    popperCollisions,\n    oppositeSidePopperCollisions\n  );\n\n  // adjust alignnment accounting for collisions\n  const placedAlign = getAlignAccountingForCollisions(\n    popperSize,\n    anchorRect,\n    side,\n    align,\n    popperCollisions\n  );\n\n  const placedPopperPoint = allPlacementPoints[placedSide][placedAlign];\n\n  // compute adjusted popper / arrow styles\n  const popperStyles = getPlacementStylesForPoint(placedPopperPoint);\n\n  let arrowStyles = UNMEASURED_ARROW_STYLES;\n  if (arrowSize) {\n    arrowStyles = getPopperArrowStyles({\n      popperSize,\n      arrowSize,\n      arrowOffset,\n      side: placedSide,\n      align: placedAlign,\n    });\n  }\n\n  const transformOrigin = getTransformOrigin(\n    popperSize,\n    placedSide,\n    placedAlign,\n    arrowOffset,\n    arrowSize\n  );\n\n  return {\n    popperStyles: {\n      ...popperStyles,\n      ['--radix-popper-transform-origin' as any]: transformOrigin,\n    },\n    arrowStyles,\n    placedSide,\n    placedAlign,\n  };\n}\n\ntype AllPlacementPoints = Record<Side, Record<Align, Point>>;\n\nfunction getAllPlacementPoints(\n  popperSize: Size,\n  anchorRect: ClientRect,\n  sideOffset: number = 0,\n  alignOffset: number = 0,\n  arrowSize?: Size\n): AllPlacementPoints {\n  const arrowBaseToTipLength = arrowSize ? arrowSize.height : 0;\n\n  const x = getPopperSlotsForAxis(anchorRect, popperSize, 'x');\n  const y = getPopperSlotsForAxis(anchorRect, popperSize, 'y');\n\n  const topY    = y.before - sideOffset - arrowBaseToTipLength; // prettier-ignore\n  const bottomY = y.after  + sideOffset + arrowBaseToTipLength; // prettier-ignore\n  const leftX   = x.before - sideOffset - arrowBaseToTipLength; // prettier-ignore\n  const rightX  = x.after  + sideOffset + arrowBaseToTipLength; // prettier-ignore\n\n  // prettier-ignore\n  const map: AllPlacementPoints = {\n    top: {\n      start:  { x: x.start + alignOffset, y: topY },\n      center: { x: x.center,              y: topY },\n      end:    { x: x.end - alignOffset,   y: topY },\n    },\n    right: {\n      start:  { x: rightX, y: y.start + alignOffset },\n      center: { x: rightX, y: y.center },\n      end:    { x: rightX, y: y.end - alignOffset },\n    },\n    bottom: {\n      start:  { x: x.start + alignOffset, y: bottomY },\n      center: { x: x.center,              y: bottomY },\n      end:    { x: x.end - alignOffset,   y: bottomY },\n    },\n    left: {\n      start:  { x: leftX, y: y.start + alignOffset },\n      center: { x: leftX, y: y.center },\n      end:    { x: leftX, y: y.end - alignOffset },\n    },\n  };\n\n  return map;\n}\n\nfunction getPopperSlotsForAxis(anchorRect: ClientRect, popperSize: Size, axis: Axis) {\n  const startSide = axis === 'x' ? 'left' : 'top';\n  const anchorStart = anchorRect[startSide];\n\n  const dimension = axis === 'x' ? 'width' : 'height';\n  const anchorDimension = anchorRect[dimension];\n  const popperDimension = popperSize[dimension];\n\n  // prettier-ignore\n  return {\n    before: anchorStart - popperDimension,\n    start:  anchorStart,\n    center: anchorStart + (anchorDimension - popperDimension) / 2,\n    end:    anchorStart + anchorDimension - popperDimension,\n    after:  anchorStart + anchorDimension,\n  };\n}\n\n/**\n * Gets an adjusted side based on collision information\n */\nfunction getSideAccountingForCollisions(\n  /** The side we want to ideally position to */\n  side: Side,\n  /** The collisions for this given side */\n  collisions: Collisions,\n  /** The collisions for the opposite side (if we were to swap side) */\n  oppositeSideCollisions: Collisions\n): Side {\n  const oppositeSide = getOppositeSide(side);\n  // in order to prevent premature jumps\n  // we only swap side if there's enough space to fit on the opposite side\n  return collisions[side] && !oppositeSideCollisions[oppositeSide] ? oppositeSide : side;\n}\n\n/**\n * Gets an adjusted alignment based on collision information\n */\nfunction getAlignAccountingForCollisions(\n  /** The size of the popper to place */\n  popperSize: Size,\n  /** The size of the anchor we are placing around */\n  anchorSize: Size,\n  /** The final side */\n  side: Side,\n  /** The desired align */\n  align: Align,\n  /** The collisions */\n  collisions: Collisions\n): Align {\n  const isHorizontalSide = side === 'top' || side === 'bottom';\n  const startBound = isHorizontalSide ? 'left' : 'top';\n  const endBound = isHorizontalSide ? 'right' : 'bottom';\n  const dimension = isHorizontalSide ? 'width' : 'height';\n  const isAnchorBigger = anchorSize[dimension] > popperSize[dimension];\n\n  if (align === 'start' || align === 'center') {\n    if ((collisions[startBound] && isAnchorBigger) || (collisions[endBound] && !isAnchorBigger)) {\n      return 'end';\n    }\n  }\n\n  if (align === 'end' || align === 'center') {\n    if ((collisions[endBound] && isAnchorBigger) || (collisions[startBound] && !isAnchorBigger)) {\n      return 'start';\n    }\n  }\n\n  return align;\n}\n\nfunction getPlacementStylesForPoint(point: Point): CSS.Properties {\n  const x = Math.round(point.x + window.scrollX);\n  const y = Math.round(point.y + window.scrollY);\n  return {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    minWidth: 'max-content',\n    willChange: 'transform',\n    transform: `translate3d(${x}px, ${y}px, 0)`,\n  };\n}\n\nfunction getTransformOrigin(\n  popperSize: Size,\n  side: Side,\n  align: Align,\n  arrowOffset: number,\n  arrowSize?: Size\n): CSS.Properties['transformOrigin'] {\n  const isHorizontalSide = side === 'top' || side === 'bottom';\n\n  const arrowBaseLength = arrowSize ? arrowSize.width : 0;\n  const arrowBaseToTipLength = arrowSize ? arrowSize.height : 0;\n  const sideOffset = arrowBaseToTipLength;\n  const alignOffset = arrowBaseLength / 2 + arrowOffset;\n\n  let x = '';\n  let y = '';\n\n  if (isHorizontalSide) {\n    x = {\n      start: `${alignOffset}px`,\n      center: 'center',\n      end: `${popperSize.width - alignOffset}px`,\n    }[align];\n\n    y = side === 'top' ? `${popperSize.height + sideOffset}px` : `${-sideOffset}px`;\n  } else {\n    x = side === 'left' ? `${popperSize.width + sideOffset}px` : `${-sideOffset}px`;\n\n    y = {\n      start: `${alignOffset}px`,\n      center: 'center',\n      end: `${popperSize.height - alignOffset}px`,\n    }[align];\n  }\n\n  return `${x} ${y}`;\n}\n\nconst UNMEASURED_POPPER_STYLES: CSS.Properties = {\n  // position: 'fixed' here is important because it will take the popper\n  // out of the flow so it does not disturb the position of the anchor\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  opacity: 0,\n  transform: 'translate3d(0, -200%, 0)',\n};\n\nconst UNMEASURED_ARROW_STYLES: CSS.Properties = {\n  // given the arrow is nested inside the popper,\n  // make sure that it is out of the flow and doesn't hinder then popper's measurement\n  position: 'absolute',\n  opacity: 0,\n};\n\ntype GetArrowStylesOptions = {\n  /** The size of the popper to place */\n  popperSize: Size;\n  /** The size of the arrow itself */\n  arrowSize: Size;\n  /** An offset for the arrow along the align axis */\n  arrowOffset: number;\n  /** The side where the arrow points to */\n  side: Side;\n  /** The alignment of the arrow along the side */\n  align: Align;\n};\n\n/**\n * Computes the styles necessary to position, rotate and align the arrow correctly.\n * It can adjust itself based on anchor/popper size, side/align and an optional offset.\n */\nfunction getPopperArrowStyles({\n  popperSize,\n  arrowSize,\n  arrowOffset,\n  side,\n  align,\n}: GetArrowStylesOptions): CSS.Properties {\n  const popperCenterX = (popperSize.width - arrowSize.width) / 2;\n  const popperCenterY = (popperSize.height - arrowSize.width) / 2;\n\n  const rotationMap = { top: 0, right: 90, bottom: 180, left: -90 };\n  const rotation = rotationMap[side];\n  const arrowMaxDimension = Math.max(arrowSize.width, arrowSize.height);\n\n  const styles: CSS.Properties = {\n    // we make sure we put the arrow inside a 1:1 ratio container\n    // this is to make the rotation handling simpler\n    // as we do no need to worry about changing the transform-origin\n    width: `${arrowMaxDimension}px`,\n    height: `${arrowMaxDimension}px`,\n\n    // rotate the arrow appropriately\n    transform: `rotate(${rotation}deg)`,\n    willChange: 'transform',\n\n    // position the arrow appropriately\n    position: 'absolute',\n    [side]: '100%',\n\n    // Because the arrow gets rotated (see `transform above`)\n    // and we are putting it inside a 1:1 ratio container\n    // we need to adjust the CSS direction from `ltr` to `rtl`\n    // in some circumstances\n    direction: getArrowCssDirection(side, align),\n  };\n\n  if (side === 'top' || side === 'bottom') {\n    if (align === 'start') {\n      styles.left = `${arrowOffset}px`;\n    }\n    if (align === 'center') {\n      styles.left = `${popperCenterX}px`;\n    }\n    if (align === 'end') {\n      styles.right = `${arrowOffset}px`;\n    }\n  }\n\n  if (side === 'left' || side === 'right') {\n    if (align === 'start') {\n      styles.top = `${arrowOffset}px`;\n    }\n    if (align === 'center') {\n      styles.top = `${popperCenterY}px`;\n    }\n    if (align === 'end') {\n      styles.bottom = `${arrowOffset}px`;\n    }\n  }\n\n  return styles;\n}\n\n/**\n * Adjusts the arrow's CSS direction (`ltr` / `rtl`)\n */\nfunction getArrowCssDirection(side: Side, align: Align): CSS.Property.Direction {\n  if ((side === 'top' || side === 'right') && align === 'end') {\n    return 'rtl';\n  }\n\n  if ((side === 'bottom' || side === 'left') && align !== 'end') {\n    return 'rtl';\n  }\n\n  return 'ltr';\n}\n\n/**\n * Gets the opposite side of a given side (ie. top => bottom, left => right, …)\n */\nfunction getOppositeSide(side: Side): Side {\n  const oppositeSides: Record<Side, Side> = {\n    top: 'bottom',\n    right: 'left',\n    bottom: 'top',\n    left: 'right',\n  };\n  return oppositeSides[side];\n}\n\n/**\n * Creates a new rect (`ClientRect`) based on a given one but contracted by\n * a given amout on each side.\n */\nfunction getContractedRect(rect: ClientRect, amount: number) {\n  return DOMRect.fromRect({\n    width: rect.width - amount * 2,\n    height: rect.height - amount * 2,\n    x: rect.left + amount,\n    y: rect.top + amount,\n  });\n}\n\n/**\n * Gets collisions for each side of a rect (top, right, bottom, left)\n */\nfunction getCollisions(\n  /** The rect to test collisions against */\n  rect: ClientRect,\n  /** The rect which represents the boundaries for collision checks */\n  collisionBoundariesRect: ClientRect\n) {\n  return {\n    top: rect.top < collisionBoundariesRect.top,\n    right: rect.right > collisionBoundariesRect.right,\n    bottom: rect.bottom > collisionBoundariesRect.bottom,\n    left: rect.left < collisionBoundariesRect.left,\n  };\n}\n\ntype Collisions = ReturnType<typeof getCollisions>;\n\nexport { getPlacementData, SIDE_OPTIONS, ALIGN_OPTIONS };\nexport type { Side, Align };\n"]},"metadata":{},"sourceType":"module"}