{"ast":null,"code":"import { drawConnectors } from '@mediapipe/drawing_utils';\nimport { FACEMESH_FACE_OVAL, FACEMESH_LEFT_EYE, FACEMESH_LEFT_EYEBROW, FACEMESH_LEFT_IRIS, FACEMESH_LIPS, FACEMESH_RIGHT_EYE, FACEMESH_RIGHT_EYEBROW, FACEMESH_RIGHT_IRIS, FACEMESH_TESSELATION } from '@mediapipe/face_mesh';\n/**\n * canvasに描画する\n * @param ctx コンテキスト\n * @param results 検出結果\n * @param bgImage capture imageを描画するか\n * @param emphasis 強調するlandmarkのindex\n */\n\nexport const draw = (ctx, results, bgImage, emphasis) => {\n  const width = ctx.canvas.width;\n  const height = ctx.canvas.height;\n  ctx.save();\n  ctx.clearRect(0, 0, width, height);\n  if (bgImage) ctx.drawImage(results.image, 0, 0, width, height);\n\n  if (results.multiFaceLandmarks) {\n    const lineWidth = 1;\n    const tesselation = {\n      color: '#C0C0C070',\n      lineWidth\n    };\n    const right_eye = {\n      color: '#FF3030',\n      lineWidth\n    };\n    const left_eye = {\n      color: '#30FF30',\n      lineWidth\n    };\n    const face_oval = {\n      color: '#E0E0E0',\n      lineWidth\n    };\n\n    for (const landmarks of results.multiFaceLandmarks) {\n      // 顔の表面（埋め尽くし）\n      drawConnectors(ctx, landmarks, FACEMESH_TESSELATION, tesselation); // 右の目・眉・瞳\n\n      drawConnectors(ctx, landmarks, FACEMESH_RIGHT_EYE, right_eye);\n      drawConnectors(ctx, landmarks, FACEMESH_RIGHT_EYEBROW, right_eye);\n      drawConnectors(ctx, landmarks, FACEMESH_RIGHT_IRIS, right_eye); // 左の目・眉・瞳\n\n      drawConnectors(ctx, landmarks, FACEMESH_LEFT_EYE, left_eye);\n      drawConnectors(ctx, landmarks, FACEMESH_LEFT_EYEBROW, left_eye);\n      drawConnectors(ctx, landmarks, FACEMESH_LEFT_IRIS, left_eye); // 顔の輪郭\n\n      drawConnectors(ctx, landmarks, FACEMESH_FACE_OVAL, face_oval); // 唇\n\n      drawConnectors(ctx, landmarks, FACEMESH_LIPS, face_oval); // landmarkの強調描画\n\n      drawPoint(ctx, landmarks[emphasis]);\n    }\n  }\n\n  ctx.restore();\n};\n/**\n * 特定のlandmarkを強調する\n * @param ctx\n * @param point\n */\n\nconst drawPoint = (ctx, point) => {\n  const x = ctx.canvas.width * point.x;\n  const y = ctx.canvas.height * point.y;\n  const r = 5;\n  ctx.fillStyle = '#22a7f2';\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, Math.PI * 2, true);\n  ctx.fill();\n};\n\nexport default draw;","map":{"version":3,"names":["drawConnectors","FACEMESH_FACE_OVAL","FACEMESH_LEFT_EYE","FACEMESH_LEFT_EYEBROW","FACEMESH_LEFT_IRIS","FACEMESH_LIPS","FACEMESH_RIGHT_EYE","FACEMESH_RIGHT_EYEBROW","FACEMESH_RIGHT_IRIS","FACEMESH_TESSELATION","draw","ctx","results","bgImage","emphasis","width","canvas","height","save","clearRect","drawImage","image","multiFaceLandmarks","lineWidth","tesselation","color","right_eye","left_eye","face_oval","landmarks","drawPoint","restore","point","x","y","r","fillStyle","beginPath","arc","Math","PI","fill"],"sources":["/Users/tamurakeito/Desktop/facemesh/src/drawCanvas.ts"],"sourcesContent":["import { drawConnectors } from '@mediapipe/drawing_utils';\nimport {\n    FACEMESH_FACE_OVAL, FACEMESH_LEFT_EYE, FACEMESH_LEFT_EYEBROW, FACEMESH_LEFT_IRIS, FACEMESH_LIPS,\n    FACEMESH_RIGHT_EYE, FACEMESH_RIGHT_EYEBROW, FACEMESH_RIGHT_IRIS, FACEMESH_TESSELATION,\n    NormalizedLandmark, Results\n} from '@mediapipe/face_mesh';\n\n/**\n * canvasに描画する\n * @param ctx コンテキスト\n * @param results 検出結果\n * @param bgImage capture imageを描画するか\n * @param emphasis 強調するlandmarkのindex\n */\nexport const draw = (\n    ctx: CanvasRenderingContext2D,\n    results: Results,\n    bgImage: boolean,\n    emphasis: number\n) => {\n    const width = ctx.canvas.width\n    const height = ctx.canvas.height\n\n    ctx.save()\n    ctx.clearRect(0, 0, width, height)\n\n    if (bgImage) ctx.drawImage(results.image, 0, 0, width, height)\n\n    if (results.multiFaceLandmarks) {\n        const lineWidth = 1\n        const tesselation = { color: '#C0C0C070', lineWidth }\n        const right_eye = { color: '#FF3030', lineWidth }\n        const left_eye = { color: '#30FF30', lineWidth }\n        const face_oval = { color: '#E0E0E0', lineWidth }\n\n        for (const landmarks of results.multiFaceLandmarks) {\n            // 顔の表面（埋め尽くし）\n            drawConnectors(ctx, landmarks, FACEMESH_TESSELATION, tesselation)\n            // 右の目・眉・瞳\n            drawConnectors(ctx, landmarks, FACEMESH_RIGHT_EYE, right_eye)\n            drawConnectors(ctx, landmarks, FACEMESH_RIGHT_EYEBROW, right_eye)\n            drawConnectors(ctx, landmarks, FACEMESH_RIGHT_IRIS, right_eye)\n            // 左の目・眉・瞳\n            drawConnectors(ctx, landmarks, FACEMESH_LEFT_EYE, left_eye)\n            drawConnectors(ctx, landmarks, FACEMESH_LEFT_EYEBROW, left_eye)\n            drawConnectors(ctx, landmarks, FACEMESH_LEFT_IRIS, left_eye)\n            // 顔の輪郭\n            drawConnectors(ctx, landmarks, FACEMESH_FACE_OVAL, face_oval)\n            // 唇\n            drawConnectors(ctx, landmarks, FACEMESH_LIPS, face_oval)\n\n            // landmarkの強調描画\n            drawPoint(ctx, landmarks[emphasis])\n        }\n    }\n    ctx.restore()\n}\n\n/**\n * 特定のlandmarkを強調する\n * @param ctx\n * @param point\n */\nconst drawPoint = (ctx: CanvasRenderingContext2D, point: NormalizedLandmark) => {\n    const x = ctx.canvas.width * point.x\n    const y = ctx.canvas.height * point.y\n    const r = 5\n\n    ctx.fillStyle = '#22a7f2'\n    ctx.beginPath()\n    ctx.arc(x, y, r, 0, Math.PI * 2, true)\n    ctx.fill()\n}\n\nexport default draw;"],"mappings":"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"},"metadata":{},"sourceType":"module"}